public class ClientSender<THub> : Hub
    where THub : Hub<IBaseClient>
{
    private readonly IHubContext<THub, IBaseClient> _context;

    public ClientSender(IHubContext<THub, IBaseClient> context)
    {
        _context = context;
    }

    public GroupSender<THub> Group(string roomId) => new(_context, roomId);

    public GameBoardSender<THub> GameBoard(string gameBoardUserId) => new(_context, gameBoardUserId);

    public AllPlayersSender<THub> Players() => new(_context);

    public PlayerSender<THub> Players(IEnumerable<string> playerIds) => new(_context, playerIds);
    
    public PlayerSender<THub> Player(string playerId) => new(_context, new List<string> { playerId });
    
}

public class GroupSender<THub> : Hub where THub : Hub<IBaseClient>
{
    private readonly IHubContext<THub, IBaseClient> _context;
    private readonly string _roomId;

    public GroupSender(IHubContext<THub, IBaseClient> context, string roomId)
    {
        _context = context;
        _roomId = roomId;
    }

    public async Task SendMessageAsync(string message)
    {
        await _context.Clients.Group(_roomId).ReceiveMessage(message);
    }
}

public class GameBoardSender<THub> : Hub where THub : Hub<IBaseClient>
{
    private readonly IHubContext<THub, IBaseClient> _context;
    private readonly string _gameBoardUserId;

    public GameBoardSender(IHubContext<THub, IBaseClient> context, string gameBoardUserId)
    {
        _context = context;
        _gameBoardUserId = gameBoardUserId;
    }

    public Task SendMessageAsync(string message)
    {
        return _context.Clients.User(_gameBoardUserId).ReceiveMessage(message);
    }
}

public class AllPlayersSender<THub> : Hub where THub : Hub<IBaseClient>
{
    private readonly IHubContext<THub, IBaseClient> _context;

    public AllPlayersSender(IHubContext<THub, IBaseClient> context, )
    {
        _context = context;
    }

    public Task SendMessageAsync(string message)
    {
        return _context.Clients.All.SendAsync(message);
    }
}

public class PlayerSender<THub> : Hub where THub : Hub<IBaseClient>
{
    private readonly IHubContext<THub, IBaseClient> _context;
    private readonly List<string> _playerIds;

    public PlayerSender(IHubContext<THub, IBaseClient> context, IEnumerable<string> playerIds)
    {
        _context = context;
        _playerIds = playerIds.ToList();
    }

    public Task SendAsync(string message)
    {
        var tasks = new List<Task>();
        foreach (var playerId in _playerIds)
        {
            tasks.Add(_context.Clients.User(playerId).SendAsync(message));
        }
        return Task.WhenAll(tasks);
    }
}
